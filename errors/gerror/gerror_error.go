// Copyright GoFrame Author(https://goframe.org). All Rights Reserved.
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file,
// You can obtain one at https://github.com/basicfu/gf.

package gerror

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"runtime"
	"strings"
)

// Error is custom error for additional features.
type Error struct {
	error  error  // Wrapped error.
	stack  stack  // Stack array, which records the stack information when this error is created or wrapped.
	msg    string //只对外的msg
	code   int
	detail string //抛错详细错误传递给全局错误记录，不返回到前台,也可以考虑interface记录err对象
}

const (
	stackFilterKey = "/errors/gerror/gerror"
)

var (
	// goRootForFilter is used for stack filtering purpose.
	// Mainly for development environment.
	goRootForFilter = runtime.GOROOT()
)

func init() {
	if goRootForFilter != "" {
		goRootForFilter = strings.Replace(goRootForFilter, "\\", "/", -1)
	}
}
func (err Error) WithCode(code int) Error {
	err.code = code
	return err
}
func (err Error) WithMsg(msg string) Error {
	err.msg = msg
	return err
}
func (err Error) WithDetail(detail string) Error {
	err.detail = detail
	return err
}
func (err Error) WithSkip(skip ...int) Error {
	if len(skip) > 0 {
		err.stack = callers(skip[0])
	} else {
		err.stack = callers()
	}
	return err
}
func (err Error) Msg() string {
	return err.msg
}
func (err Error) Detail() string {
	return err.detail
}
func (err Error) Stack() []uintptr {
	return err.stack
}
func (err Error) StackRow(row int) (int, string, string) {
	p := err.stack[row]
	if fn := runtime.FuncForPC(p - 1); fn != nil {
		file, line := fn.FileLine(p - 1)
		if strings.Contains(file, stackFilterKey) {
			return 0, "", ""
		}
		// Avoid stack string like "<autogenerated>"
		if strings.Contains(file, "<") {
			return 0, "", ""
		}
		if goRootForFilter != "" && len(file) >= len(goRootForFilter) && file[0:len(goRootForFilter)] == goRootForFilter {
			return 0, "", ""
		}
		return line, file, fn.Name()
	}
	return 0, "", ""
}

// Error implements the interface of Error, it returns all the error as string.
func (err Error) Error() string {
	errStr := err.msg
	if err.error != nil {
		if err.msg != "" {
			errStr += ": "
		}
		errStr += err.error.Error()
	}
	return errStr
}

// Code returns the error code.
// It returns -1 if it has no error code.
func (err Error) Code() int {
	return err.code
}

// Cause returns the root cause error.
func (err Error) Cause() error {
	loop := err
	for true {
		if loop.error != nil {
			if e, ok := loop.error.(Error); ok {
				// Internal Error struct.
				loop = e
			} else if e, ok := loop.error.(apiCause); ok {
				// Other Error that implements ApiCause interface.
				return e.Cause()
			} else {
				return loop.error
			}
		} else {
			// return loop
			// To be compatible with Case of https://github.com/pkg/errors.
			return errors.New(loop.msg)
		}
	}
	return nil
}

// Format formats the frame according to the fmt.Formatter interface.
//
// %v, %s   : Print all the error string;
// %-v, %-s : Print current level error string;
// %+s      : Print full stack error list;
// %+v      : Print the error string and full stack error list;
func (err Error) Format(s fmt.State, verb rune) {
	switch verb {
	case 's', 'v':
		switch {
		case s.Flag('-'):
			if err.msg != "" {
				io.WriteString(s, err.msg)
			} else {
				io.WriteString(s, err.Error())
			}
		case s.Flag('+'):
			if verb == 's' {
				io.WriteString(s, err.StackString())
			} else {
				io.WriteString(s, err.Error()+"\n"+err.StackString())
			}
		default:
			io.WriteString(s, err.Error())
		}
	}
}

// Stack returns the stack callers as string.
// It returns an empty string if the <err> does not support stacks.
func (err Error) StackString() string {
	var (
		loop   = err
		index  = 1
		buffer = bytes.NewBuffer(nil)
	)
	for true {
		buffer.WriteString(fmt.Sprintf("%d. %-v\n", index, loop))
		index++
		formatSubStack(loop.stack, buffer)
		if loop.error != nil {
			if e, ok := loop.error.(Error); ok {
				loop = e
			} else {
				buffer.WriteString(fmt.Sprintf("%d. %s\n", index, loop.error.Error()))
				index++
				break
			}
		} else {
			break
		}
	}
	return buffer.String()
}

// Current creates and returns the current level error.
// It returns nil if current level error is nil.
func (err Error) Current() error {
	return &Error{
		error: nil,
		stack: err.stack,
		msg:   err.msg,
	}
}

// Next returns the next level error.
// It returns nil if current level error or the next level error is nil.
func (err Error) Next() error {
	return err.error
}

// MarshalJSON implements the interface MarshalJSON for json.Marshal.
// Note that do not use pointer as its receiver here.
func (err Error) MarshalJSON() ([]byte, error) {
	return []byte(`"` + err.Error() + `"`), nil
}

// formatSubStack formats the stack for error.
func formatSubStack(st stack, buffer *bytes.Buffer) {
	index := 1
	space := "  "
	for _, p := range st {
		if fn := runtime.FuncForPC(p - 1); fn != nil {
			file, line := fn.FileLine(p - 1)
			if strings.Contains(file, stackFilterKey) {
				continue
			}
			// Avoid stack string like "<autogenerated>"
			if strings.Contains(file, "<") {
				continue
			}
			if goRootForFilter != "" && len(file) >= len(goRootForFilter) && file[0:len(goRootForFilter)] == goRootForFilter {
				continue
			}
			if index > 9 {
				space = " "
			}
			buffer.WriteString(fmt.Sprintf("   %d).%s%s\n    \t%s:%d\n", index, space, fn.Name(), file, line))
			index++
		}
	}
}
